class Tokens {
    fun getKeywordNames() = keywords.entries.associateBy { (k, v) -> v to k }

    fun getOperatorNames() = operators.entries.associateBy { (k, v) -> v to k }

    val keywords = mapOf(
        "as" to Token("as", Type.KEYWORD),
        "as?" to Token("AS_SAFE", Type.KEYWORD),
        "break" to Token("CONTINUE", Type.KEYWORD),
        "break@" to Token("BREAK_AT", Type.KEYWORD),
        "class" to Token("CLASS", Type.KEYWORD),
        "continue" to Token("CONTINUE", Type.KEYWORD),
        "continue" to Token("CONTINUE_AT", Type.KEYWORD),
        "do" to Token("DO", Type.KEYWORD),
        "else" to Token("ELSE", Type.KEYWORD),
        "for" to Token("FOR", Type.KEYWORD),
        "fun" to Token("FUN", Type.KEYWORD),
        "if" to Token("IF", Type.KEYWORD),
        "in" to Token("IN", Type.KEYWORD),
        "!in" to Token("NOT_IN", Type.KEYWORD),
        "interface" to Token("INTERFACE", Type.KEYWORD),
        "is" to Token("IS", Type.KEYWORD),
        "!is" to Token("NOT_IS", Type.KEYWORD),
        "object" to Token("OBJECT", Type.KEYWORD),
        "package" to Token("PACKAGE", Type.KEYWORD),
        "return" to Token("RETURN", Type.KEYWORD),
        "return@" to Token("RETURN_AT", Type.KEYWORD),
        "super" to Token("SUPER", Type.KEYWORD),
        "super@" to Token("SUPER_AT", Type.KEYWORD),
        "this" to Token("THIS", Type.KEYWORD),
        "this@" to Token("THIS_AT", Type.KEYWORD),
        "throw" to Token("THROW", Type.KEYWORD),
        "try" to Token("TRY", Type.KEYWORD),
        "typealias" to Token("TYPEALIAS", Type.KEYWORD),
        "typeof" to Token("TYPEOF", Type.KEYWORD),
        "val" to Token("VAL", Type.KEYWORD),
        "var" to Token("VAR", Type.KEYWORD),
        "when" to Token("WHEN", Type.KEYWORD),
        "while" to Token("WHILE", Type.KEYWORD),

        //soft keywords
        "by" to Token("BY", Type.KEYWORD),
        "catch" to Token("CATCH", Type.KEYWORD),
        "constructor" to Token("CONSTRUCTOR", Type.KEYWORD),
        "delegate" to Token("DELEGATE", Type.KEYWORD),
        "dynamic" to Token("DYNAMIC", Type.KEYWORD),
        "field" to Token("FIELD", Type.KEYWORD),
        "file" to Token("FILE", Type.KEYWORD),
        "finally" to Token("FINALLY", Type.KEYWORD),
        "get" to Token("GET", Type.KEYWORD),
        "import" to Token("IMPORT", Type.KEYWORD),
        "init" to Token("INIT", Type.KEYWORD),
        "param" to Token("PARAM", Type.KEYWORD),
        "property" to Token("PROPERTY", Type.KEYWORD),
        "receiver" to Token("RECEIVER", Type.KEYWORD),
        "set" to Token("SET", Type.KEYWORD),
        "setparam" to Token("SETPARAM", Type.KEYWORD),
        "where" to Token("WHERE", Type.KEYWORD),

        //modifier keywords
        "actual" to Token("ACTUAL", Type.KEYWORD),
        "abstract" to Token("ABSTRACT", Type.KEYWORD),
        "annotation" to Token("ANNOTATION", Type.KEYWORD),
        "companion" to Token("Companion", Type.KEYWORD),
        "const" to Token("CONST", Type.KEYWORD),
        "crossinline" to Token("CROSSINLINE", Type.KEYWORD),
        "data" to Token("DATA", Type.KEYWORD),
        "enum" to Token("ENUM", Type.KEYWORD),
        "expect" to Token("EXPECT", Type.KEYWORD),
        "external" to Token("EXTERNAL", Type.KEYWORD),
        "final" to Token("FINAL", Type.KEYWORD),
        "infix" to Token("INFIX", Type.KEYWORD),
        "inline" to Token("INLINE", Type.KEYWORD),
        "inner" to Token("INNER", Type.KEYWORD),
        "internal" to Token("INTERNAL", Type.KEYWORD),
        "lateinit" to Token("LATEINIT", Type.KEYWORD),
        "noinline" to Token("NOINLINE", Type.KEYWORD),
        "open" to Token("OPEN", Type.KEYWORD),
        "operator" to Token("OPERATOR", Type.KEYWORD),
        "out" to Token("OUT", Type.KEYWORD),
        "override" to Token("OVERRIDE", Type.KEYWORD),
        "private" to Token("PRIVATE", Type.KEYWORD),
        "protected" to Token("PROTECTED", Type.KEYWORD),
        "public" to Token("PUBLIC", Type.KEYWORD),
        "reified" to Token("REIFIED", Type.KEYWORD),
        "sealed" to Token("SEALED", Type.KEYWORD),
        "suspend" to Token("SUSPEND", Type.KEYWORD),
        "tailrec" to Token("TAILREC", Type.KEYWORD),
        "vararg" to Token("VARARG", Type.KEYWORD)
    )

    val operators = mapOf(
        "..." to Token("RESERVED", Type.OPERATOR),
        "." to Token("DOT", Type.OPERATOR),
        "," to Token("COMMA", Type.OPERATOR),
        "(" to Token("LPAREN", Type.OPERATOR),
        ")" to Token("RPAREN", Type.OPERATOR),
        "[" to Token("LSQUARE", Type.OPERATOR),
        "]" to Token("RSQUARE", Type.OPERATOR),
        "{" to Token("LCURL", Type.OPERATOR),
        "}" to Token("RCURL", Type.OPERATOR),
        "*" to Token("MULT", Type.OPERATOR),
        "%" to Token("MOD", Type.OPERATOR),
        "/" to Token("DIV", Type.OPERATOR),
        "+" to Token("ADD", Type.OPERATOR),
        "-" to Token("SUB", Type.OPERATOR),
        "++" to Token("INCR", Type.OPERATOR),
        "--" to Token("DECR", Type.OPERATOR),
        "&&" to Token("CONJ", Type.OPERATOR),
        "||" to Token("DISJ", Type.OPERATOR),
        "!" to Token("EXCL", Type.OPERATOR), //FIXME: EXCL_WS and EXCL_NO_WS
        ":" to Token("COLON", Type.OPERATOR),
        ";" to Token("SEMICOLON", Type.OPERATOR),
        "=" to Token("ASSIGNMENT", Type.OPERATOR),
        "+=" to Token("ADD_ASSIGNMENT", Type.OPERATOR),
        "-=" to Token("SUB_ASSIGNMENT", Type.OPERATOR),
        "*=" to Token("MULT_ASSIGNMENT", Type.OPERATOR),
        "/=" to Token("DIV_ASSIGNMENT", Type.OPERATOR),
        "%=" to Token("MOD_ASSIGNMENT", Type.OPERATOR),
        "->" to Token("ARROW", Type.OPERATOR),
        "=>" to Token("DOUBLE_ARROW", Type.OPERATOR),
        ".." to Token("RANGE", Type.OPERATOR),
        "::" to Token("COLONCOLON", Type.OPERATOR),
        ";;" to Token("DOUBLE_SEMICOLON", Type.OPERATOR),
        "#" to Token("HASH", Type.OPERATOR),
        "@" to Token("AT", Type.OPERATOR), //FIXME: AT_NO_WS and AT_POST_WS and AT_PRE_WS and AT_BOTH_WS
        "?" to Token("QUEST", Type.OPERATOR),   //FIXME: QUEST_WS and QUEST_NO_WS
        "<" to Token("LANGLE", Type.OPERATOR),
        ">" to Token("RANGLE", Type.OPERATOR),
        "<=" to Token("LE", Type.OPERATOR),
        ">=" to Token("GE", Type.OPERATOR),
        "!=" to Token("EXCL_EQ", Type.OPERATOR),
        "!==" to Token("EXCL_EQEQ", Type.OPERATOR),
        "==" to Token("EQEQ", Type.OPERATOR),
        "===" to Token("EQEQEQ", Type.OPERATOR),
        "\'" to Token("SINGLE_QUOTE", Type.OPERATOR)
    )
}